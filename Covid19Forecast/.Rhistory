set.seed(23)
xar<-rep(0,1000)
for(i in 1:1000)
{x<-rpois(40,5); xar[i]<-mean(x)}
head(xar)
hist(xar)
hist(xar, prob=T,ylim=c(0,1.2))
curve(dnorm(x,mean=5,sd=sqrt(5)),add=T,lwd=2,col="red")
curve(dnorm(x,mean=5,sd=sqrt(.125)),add=T,lwd=2,col="red")
hist(xar, prob=T,ylim=c(0,1.2))
curve(dnorm(x,mean=5,sd=sqrt(.125)),add=T,lwd=2,col="red")
mean(xar); var(xar)
q()
sum(1,2)
time()
timestamp()
##------ Sun May 23 20:18:39 2021 ------##
install.packages(c("BMA", "caret", "e1071", "hms", "inline", "ks", "plot3D", "stringi", "xfun"))
install.packages("stringi")
u=scan()
u=scan()
u=scan()
u=scan(what=String,nmax = 1)
u=scan(what=string,nmax = 1)
u=scan(what=char,nmax = 1)
u=scan(what = character(),nmax = 1)
v=scan(what = character(),nmax = 1)
n=scan(what = numeric(), nmax = 10)
b=scan(what = character(), nmax = n)
b[1]
b[1][3]
b[3,1]
b[1,3]
b[1][2]
library(stringr)
str_detect(v,b[1])
{
str_detect(v,b[i])
}
{
str_detect(v,b[i])
}
str_detect(v,b[2])
str_detect(v,"vir")
b[1,2]
b[1[2]]
for(i in 1:n)
{
if(str_detect(v,b[i]))
}
for(i in 1:n)
str_detect(v,b[i])
for(i in 1:n)
paste(str_detect(v,b[i]))
b[i]
for(i in 1:n)
{
paste(b[i])
}
for(i in 1:n)
{
print(b[i])
}
{
print(str_detect(v,b[i]))
}
for(i in 1:n)
{
print(str_detect(v,b[i]))
}
for(i in 1:n)
{
print(str_detect(v,b[i]))
}
for(i in 1:n)
{
for(j in 1:str_length(b[i]))
{
print(str_detect(v,substr(x=b[i],j,j)))
}
}
b
for(i in 1:n)
{
flag=0;
for(j in 1:str_length(b[i]))
{
temp=substr(x=b[i],j,j)
if(str_detect(v,temp))
{
}
else
break;
}
if(flag=0)
print("NEGATIVE")
else print("POSITIVE")
}
for(i in 1:n)
{
flag=0;
for(j in 1:str_length(b[i]))
{
temp=substr(x=b[i],j,j)
if(str_detect(v,temp))
{
print(temp)
}
else
break;
}
if(flag=0)
print("NEGATIVE")
else print("POSITIVE")
}
for(i in 1:n)
{
flag=0;
for(j in 1:str_length(b[i]))
{
temp=substr(x=b[i],j,j)
if(str_detect(v,temp))
{
print(temp)
}
else
break;
}
if(flag=0)
print("NEGATIVE")
else print("POSITIVE")
}
for(i in 1:n)
{
flag=0
for(j in 1:str_length(b[i]))
{
temp=substr(x=b[i],j,j)
if(str_detect(v,temp))
{
print(temp)
}
else
break;
}
if(flag=0)
print("NEGATIVE")
else print("POSITIVE")
}
x<-c(0.61,6.47,2.56,5.44,2.72,0.87,2.77,6.00,0.14,0.75)
y<-rep(0,1000)
for(i in 1:1000)
{
x_sample<-sample(x = x, size = 10, replace = TRUE)
y[i]<-mean(x_sample)
}
hhist(y)
hist(y)
hist(y,prob=T)
hist(y,prob=T, ylim=c(0,0.6))
summary(y)
var(y)
set.seed(47)
for(i in 1:1000)
{
x_sample<-sample(x = x, size = 10, replace = TRUE)
y[i]<-mean(x_sample)
}
for(i in 1:1000)
{
x_sample<-sample(x = x, size = 10, replace = TRUE)
y[i]<-1/mean(x_sample)
}
hist(y,prob=T, ylim=c(0,0.6))
hist(y,prob=T)
dt(c(0.025,0.975),df = 4)
x<-c(122,124,125,130,132)
xbar=mean(x); s=sd(x)
cv<-dt(c(0.025,0.975),df = 4)
n=length(x)
cv = qt(p = c(0.025,0.975),df = 4,lower.tail = TRUE)
print(cv)
ci = xbar + cv * sigma / sqrt(n)
ci<-rep(0,2)
ci = xbar + cv * sigma / sqrt(n)
ci = xbar + cv * s / sqrt(n)
print(ci)
quantile(replicate(1000,mean(sample(x,replace = T))),probs=c(0.025,0.975))
quantile(replicate(1000,mean(sample(x,replace = T))),probs=c(0.025,0.975))
t.test(x = x)
t.test(x = x, conf.level = 0.90)
install.packages("reticulate")
reticulate::py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import pandas as pd
reticulate::py_config()
y
reticulate::py_config()
Y
reticulate::repl_python()
import pandas as pd
import numpy as np
import numpy as np
reticulate::repl_python()
import numpy as np
import numpy as np
reticulate::repl_python()
import numpy as np
import pandas as pd
dir("C:/users/gupta/appdata/local/r-miniconda/envs/r-reticulate/Lib/site-packages")
import pandas as pd
import pandas as pd
import pandas as pd
reticulate::py_config()
setwd("E:/Vineet/work/projects/covid19_forecast")
library(dplyr) #data manipulation
library(forecast) #forecast()
library(openxlsx) #write.xlsx()
library(ggplot2)
data.world<-read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv",sep = ",",header = T)
str(data.world)
str(data.india)
write.xlsx(data.world,"E:/Vineet/work/projects/covid19_forecast/datasets/data_india.xlsx")
data.world<-read.xlsx("E:/Vineet/work/projects/covid19_forecast/datasets/data_india.xlsx")
}
{
data.india<-data.world %>%
filter(location=="India") %>%
select(date,new_cases,new_deaths)
data.india$date<-as.Date(data.india$date)
n<-nrow(data.india)
str(data.india)
}
write.xlsx(data.india,"E:/Vineet/work/projects/covid19_forecast/datasets/data_india.xlsx")
geom_area(aes(x=date,y=new_deaths),fill="#FF0000",na.rm = TRUE)
ggplot(data.india)+
geom_area(aes(x=date,y=new_cases),fill="#0088FF")+
geom_area(aes(x=date,y=new_deaths),fill="#FF0000",na.rm = TRUE)
ggplot(data=data.india)+
geom_area(aes(x=date,y=new_deaths),fill="#FF0000",na.rm = TRUE)
{
model.1<-auto.arima(data.india$new_cases); model.1
model.1.forecast<-forecast(data.india$new_cases,model = model.1,h = 15)
head(model.1.forecast$mean)
{
plot(model.1.forecast,xlab="Time(Day)",ylab="Daily Confirmed Cases",xlim=c(365,550),
main = cat("Forecasted New Cases till ",end_date))
abline(h=0)
}
}
{
model.1<-auto.arima(data.india$new_cases); model.1
model.1.forecast<-forecast(data.india$new_cases,model = model.1,h = 15)
head(model.1.forecast$mean)
{
plot(model.1.forecast,xlab="Time(Day)",
ylab="Daily Confirmed Cases",xlim=c(365,550))
abline(h=0)
}
}
head(model.1.forecast$mean)
{
model.2<-auto.arima(data.india$new_deaths); model.2
model.2.forecast<-forecast(data.india$new_deaths,model = model.2,h = 15)
head(model.2.forecast$mean)
{
plot(model.2.forecast,xlab="Time(Day)",ylab="Daily Deaths",xlim=c(365,550),
main = cat("Forecasted New Deaths till ",end_date))
abline(h=0)
}
}
{
model.2<-auto.arima(data.india$new_deaths); model.2
model.2.forecast<-forecast(data.india$new_deaths,model = model.2,h = 15)
head(model.2.forecast$mean)
{
plot(model.2.forecast,xlab="Time(Day)",
ylab="Daily Deaths",xlim=c(365,550))
abline(h=0)
}
}
q()
ls()
rm(list=ls())
ls()
exit
q()
#COVID-19 Time Series
##libraries
library(dplyr) #data manipulation
#library(astsa) #sarima()
library(forecast) #forecast()
library(openxlsx) #write.xlsx()
library(ggplot2)
##working with data
#importing data
{
data.world<-read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv",
sep = ",",header = T)
}
#preprocessing data
{
data.india<-data.world %>%
filter(location=="India") %>%
select(date,new_cases)
data.india$date<-as.Date(data.india$date)
n<-nrow(data.india)
str(data.india)
}
#plotting daily confirmed cases
daily.confirmed<-as.ts(data.india$new_cases)
str(daily.confirmed)
#plot(y=daily.confirmed,x=data.india$Date[2:n],main="New Infected",
#     ylab="No. of cases",xlab="Time (Months)",type="l",lwd=2,col="#0000ff")
ggplot(data = data.india,aes(y=new_cases,x=date))+geom_line()
#libraries
library(dplyr) #data manipulation
library(forecast) #forecast()
library(openxlsx) #write.xlsx()
library(ggplot2)
write.xlsx(data.india,"E:/Vineet/work/projects/covid19_forecast/datasets/data_india.xlsx")
data.india<-read.xlsx("E:/Vineet/work/projects/covid19_forecast/datasets/data_india.xlsx")
ggplot(data.india)+
geom_area(aes(x=date,y=new_cases),fill="#0088FF")+
geom_area(aes(x=date,y=new_deaths),fill="#FF0000",na.rm = TRUE)
ggplot(data=data.india)+
geom_area(aes(x=date,y=new_deaths),fill="#FF0000",na.rm = TRUE)
{
model.1<-auto.arima(data.india$new_cases); model.1
model.1.forecast<-forecast(data.india$new_cases,model = model.1,h = 15)
head(model.1.forecast$mean)
{
plot(model.1.forecast,xlab="Time(Day)",
ylab="Daily Confirmed Cases",xlim=c(365,550))
abline(h=0)
}
}
{
model.2<-auto.arima(data.india$new_deaths); model.2
model.2.forecast<-forecast(data.india$new_deaths,model = model.2,h = 15)
head(model.2.forecast$mean)
{
plot(model.2.forecast,xlab="Time(Day)",
ylab="Daily Deaths",xlim=c(365,550))
abline(h=0)
}
}
